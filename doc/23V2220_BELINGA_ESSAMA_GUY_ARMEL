 Probleme 
On veut √©crire un programme en C qui calcule le produit 
a√ób pour ùëé,ùëè>0 en n‚Äôutilisant que l‚Äôop√©rateur ++ (incr√©ment de 1).
Donc :
Pas de + entre deux nombres, sauf implicitement dans ++.
Pas de * pour la multiplication.

√âtapes de la solution
1. Recr√©er l‚Äôaddition
On a besoin d‚Äôune fonction qui simule x + y en ajoutant 1 √† x, y fois.
C‚Äôest la fonction :

unsigned long long add_by_inc(unsigned long long x, unsigned long long y) {
    unsigned long long i = 0;
    while (i < y) {
        ++x;   // On ajoute +1 √† x
        ++i;   // On r√©p√®te jusqu‚Äô√† avoir ajout√© y fois
    }
    return x;
}


Exemple : add_by_inc(3, 2) fait :

i=0 : x=4

i=1 : x=5
R√©sultat = 5.

2. Recr√©er la multiplication

Pour multiplier ùëé√óùëè
a√ób, il suffit de faire b additions de a.
C‚Äôest ce que fait :

unsigned long long mul_by_add(unsigned long long a, unsigned long long b) {
    unsigned long long result = 0;
    unsigned long long i = 0;
    while (i < b) {
        result = add_by_inc(result, a); // On ajoute a au r√©sultat
        ++i; // On r√©p√®te b fois
    }
    return result;
}


Exemple : mul_by_add(3, 4) fait :

i=0 : result = 0 + 3 = 3

i=1 : result = 3 + 3 = 6

i=2 : result = 6 + 3 = 9

i=3 : result = 9 + 3 = 12
R√©sultat = 12.

3. Programme principal
int main(void) {
    unsigned long long a, b;
    if (scanf("%llu %llu", &a, &b) != 2) {
        fprintf(stderr, "Entr√©e invalide\n");
        return 1;
    }


Lecture de a et b (des entiers non sign√©s de grande taille).

V√©rification que l‚Äôentr√©e est correcte.

    if (a == 0 || b == 0) {
        printf("0\n");
        return 0;
    }


Cas particulier : si l‚Äôun des deux est nul, le produit est 0.

    if (a > ULLONG_MAX / b) {
        fprintf(stderr, "Overflow possible pour %llu * %llu\n", a, b);
        return 1;
    }


V√©rifie qu‚Äôon ne d√©passe pas la capacit√© maximale d‚Äôun unsigned long long.

    unsigned long long prod = mul_by_add(a, b);
    printf("%llu\n", prod);
    return 0;
}


Calcule le produit gr√¢ce √† mul_by_add.

Affiche le r√©sultat.

Exemple d‚Äôex√©cution
Entr√©e : 5 7
Sortie : 35

